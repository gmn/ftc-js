#!/usr/bin/env node
/* vim: set syntax=javascript: */


var p = function(s) { console.log(s); };
var answer_file = "/tmp/1234-ftc-tmp";
var fs = require('fs');
var string = '';
var base = 10;
var HEX_LETTERS = ['0','1','2','3','4','5','6','7','8','9','A','B','C','D','E','F'];
var BASE_PREFIX = {2:'0b',8:'0',16:'0x'};

var usage = function() {
    var exename = process.argv[1].lastIndexOf('/') != -1 ? process.argv[1].substring( process.argv[1].lastIndexOf('/') + 1 , process.argv[1].length ) : process.argv[1];
    p( "usage: " + exename + " [-H|-O|-B] <arithmetical statement|number>" );
    p( "      -H  prints result in Hexadecimal" );
    p( "      -B  prints result in Binary" );
    p( "      -O  prints result in Octal" );
    p( "\n  If an operator (+ - / * %) is the first argument\n   the result from the previous operation will be inserted as the\n   first operand, eg. ftc 2 * 5; ftc + 2; will yield 12 ((2*5)+2)" );
    process.exit(0);
}

function is_operator( tok ) {
    switch ( tok ) {
    case "-": 
    case "+":
    case "*":
    case "/":
    case "%":
        return true;
    }
    return false;
}

// takes base-10 float, converts to int, and renders in
//  string of a different base. Supported bases: 2, 8, 16
function convert_to_base( num, base )
{    
    num = Math.floor(num) + '';
    var div = num;
    num = [];

    while ( div >= 1.0 ) {
        var mod = Math.floor( div % base );
        num.push( HEX_LETTERS[mod] );
        div = div / base;
    }

    return num.reverse().join('');
}

// takes a string; determines base from prefix, converts to Number and returns
function convert_from_base( num ) 
{
  function binary( s ) {
    var ar = s.split('').reverse();
    var i = 0;
    var base = 1;
    var sum = 0;
    while ( i < ar.length && ar[i] !== 'b' ) {
      sum += base * ar[i++];
      base *= 2;
    }
    return sum;
  }
  function octal(s) {
    var ar = s.split('').reverse();
    ar.pop();
    var i = 0;
    var base = 1;
    var sum = 0;
    while ( i < ar.length ) {
      sum += base * ar[i++];
      base *= 8;
    }
    return sum;
  }
  function hexadecimal(s) {
    return parseFloat( s + 0, 10 );
  }

  if ( /^0b/.test(num) ) {
    return binary(num);  
  } else if ( /^0x/.test(num) ) {
    return hexadecimal(num);
  } else if ( /^0/.test(num) ) {
    return octal(num);
  } else {
    return num + 0;
  }
}

function write_ans( ans )
{
    try {
        fs.writeFileSync( answer_file, ans, {encoding:"utf8",mode:438,flag:'w'} );
    } catch(e) {
    }
}

function read_ans()
{
    try {
        return fs.readFileSync( answer_file, {encoding:'utf8',flag:'r'} );
    } catch(e) {
        return null;
    }
}

/////////////////////////////////////////
// 
// begin execution
// 
/////////////////////////////////////////
if ( process.argv.length <= 2 ) {
    usage();
}


// collect arguments
process.argv.forEach(function(value,index) 
{
    if ( index >= 2 ) {       // first 2 args are: "node path" & "script name"
        if ( value === 'x' ) {  // allow using 'x' in place of '*'
            value = '*'; 
        } else {
            if ( value.charAt(0) !== '0' )
                value = value.replace( /x/g, '*' );
        }

        string += ' ' + value;
    }
});

// tokenize the string 
var tokens = string.trim().split(/\s+/g);

// check for conversion switch
switch( tokens[0] ) {
case "-H": case '-h':
    base = 16; break;
case "-O": case '-o':
    base =  8; break;
case "-B": case '-b':
    base =  2; break;
}
// remove conversion switch if found
if ( base !== 10 ) {
    tokens.shift();
}

// begins with operator: get saved answer if there is one, and attach to front
if ( is_operator(tokens[0]) ) {
    var ans = read_ans();
    if ( ans ) {
        tokens.unshift( ans.trim() );
    }
}

// look for 'ans' keyword; replace with last answer if found
if ( tokens.some(function(x){ return x === "ans" }) ) {
    var ans = read_ans();
    if ( ans ) {
        do {
            var i = tokens.indexOf('ans');
            if ( i === -1 )
                break;
            tokens[i] = ans;
        } while(1);
    }
}

// look for '0b' prefix indicating Binary number input 
for ( var i = 0, l = tokens.length; i < l; i++ ) {
    var tok = tokens[i];
    if ( /^0b/.test( tok ) ) {
      tokens[i] = convert_from_base(tok);
    }
}


// reconstitute string
string = tokens.join(' ');

// evaluation takes place here
var ans = '';
try {
    eval( "ans = " + string );
} catch(e) {
    p( 'I\'m afraid I do not understand: "'+string+'"' );
    process.exit(0);
}

if ( base != 10 )
    p( BASE_PREFIX[base] + convert_to_base( ans, base ) );
else
    p( ans );

// save answer for next call
write_ans(ans);
